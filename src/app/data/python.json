[
    {
      "question_id": 1,
      "question": "What is the Django ORM and how does it work?",
      "answer": "The Django ORM (Object-Relational Mapper) allows developers to interact with the database using Python classes instead of writing raw SQL. Each model class represents a table, and instances of the model correspond to rows. You can perform queries using methods like `.filter()`, `.get()`, `.all()`, and the ORM handles translating them into SQL under the hood."
    },
    {
      "question_id": 2,
      "question": "How do you define and apply migrations in Django?",
      "answer": "Migrations in Django track changes to your models and apply them to the database schema. You define changes in your `models.py`, then run `python manage.py makemigrations` to create migration files, and `python manage.py migrate` to apply them. Django stores applied migrations in the `django_migrations` table for tracking."
    },
    {
      "question_id": 3,
      "question": "What are Django class-based views (CBVs) and when should you use them?",
      "answer": "Class-based views allow you to build views as Python classes instead of functions, providing structure and reusability. They are useful when you need to reuse logic across views, or when you need built-in behaviors (e.g., `ListView`, `DetailView`, `CreateView`). CBVs can be extended and customized using mixins."
    },
    {
      "question_id": 4,
      "question": "How does Django handle form validation?",
      "answer": "Django uses the `Form` and `ModelForm` classes to handle form rendering and validation. You define form fields in Python, and validation is handled by field validators and the `clean()` method. You can also define custom validation logic in `clean_<fieldname>()` methods or override the `clean()` method for cross-field validation."
    },
    {
      "question_id": 5,
      "question": "What is the difference between `@login_required` and `LoginRequiredMixin`?",
      "answer": "`@login_required` is a decorator for function-based views that restricts access to authenticated users. `LoginRequiredMixin` is used with class-based views and must be placed before the view class in the inheritance order. Both ensure only authenticated users can access certain views."
    },
    {
      "question_id": 6,
      "question": "What are Django signals and how would you use them?",
      "answer": "Django signals allow decoupled applications to get notified when certain events occur, such as saving a model. You can use signals like `pre_save`, `post_save`, and `post_delete` to trigger logic (e.g., sending a welcome email when a user registers). You connect a signal handler function to a signal using `@receiver` or `signal.connect()`."
    },
    {
      "question_id": 7,
      "question": "How do you manage static files and media files in Django?",
      "answer": "Static files (CSS, JS, etc.) are managed with the `STATICFILES_DIRS` and `STATIC_ROOT` settings. Run `collectstatic` to gather them for deployment. Media files (user uploads) use `MEDIA_ROOT` and `MEDIA_URL`, and are typically handled using `FileField` or `ImageField`. In development, you use `django.views.static.serve` to serve them."
    },
    {
      "question_id": 8,
      "question": "How would you optimize a Django app for performance?",
      "answer": "Performance optimization in Django includes database query optimization (using `.select_related()`, `.prefetch_related()`), adding indexes, caching with `memcached` or `Redis`, using the Django debug toolbar, reducing template rendering complexity, and applying pagination and rate limiting to views that return large datasets."
    },
    {
      "question_id": 9,
      "question": "What is middleware in Django and how is it used?",
      "answer": "Middleware is a framework of hooks into Django’s request/response processing. Each middleware component is a class that can process a request before it reaches the view or process a response after the view has run. Common uses include authentication, logging, performance tracking, and modifying request/response objects."
    },
    {
      "question_id": 10,
      "question": "Explain Django's request/response lifecycle.",
      "answer": "The lifecycle begins when a request hits Django. It passes through middleware, then URL routing maps it to a view. The view processes logic and returns an `HttpResponse`, which then goes back through middleware before reaching the client. Django templates and the ORM often play a role in generating this response."
    },
    {
      "question_id": 11,
      "question": "What is the difference between a Django app and a Django project?",
      "answer": "A Django project is the overall web application that includes configuration and settings for the entire site. A Django app is a modular component within the project that performs a specific function, like user authentication or blog management. Multiple apps can exist within a single project."
    },
    {
      "question_id": 12,
      "question": "How do you create a custom Django management command?",
      "answer": "To create a custom command, add a `management/commands` directory inside a Django app. Then create a Python file (e.g., `mycommand.py`) with a `Command` class that inherits from `BaseCommand`. Implement the `handle()` method with your logic. Run it using `python manage.py mycommand`."
    },
    {
      "question_id": 13,
      "question": "What is the purpose of `__str__()` method in Django models?",
      "answer": "The `__str__()` method in a Django model defines the string representation of an object. It's useful for displaying human-readable names in the admin interface and during debugging. It typically returns a meaningful field like the name or title of the model instance."
    },
    {
      "question_id": 14,
      "question": "How does Django's authentication system work?",
      "answer": "Django’s authentication system handles user accounts, groups, permissions, and cookie-based sessions. It provides views for login, logout, and password management. You can customize the `User` model, use `authenticate()` and `login()` functions, and restrict views using decorators or mixins."
    },
    {
      "question_id": 15,
      "question": "What are context processors in Django templates?",
      "answer": "Context processors are functions that inject variables into the context of every template. They are defined in `TEMPLATES['OPTIONS']['context_processors']` in settings. Examples include injecting the logged-in user, request object, or custom site-wide settings into all templates."
    },
    {
      "question_id": 16,
      "question": "How do you create a REST API using Django REST Framework?",
      "answer": "To create a REST API, install Django REST Framework and define serializers to convert models to JSON. Create API views using `APIView`, `GenericAPIView`, or viewsets. Register routes using `DefaultRouter` and include them in your URLconf. DRF provides built-in support for authentication and pagination."
    },
    {
      "question_id": 17,
      "question": "What is the difference between `null=True` and `blank=True` in Django models?",
      "answer": "`null=True` means the database can store a NULL value for the field, while `blank=True` means the field is allowed to be empty in forms. Use `null=True` for optional database fields, and `blank=True` to make form validation optional. They are often used together for optional fields."
    },
    {
      "question_id": 18,
      "question": "How do you implement custom validation in Django forms?",
      "answer": "Custom validation in Django forms can be added using `clean_<fieldname>()` methods for individual fields or by overriding the `clean()` method for cross-field validation. You can raise `ValidationError` with custom messages when the input doesn't meet specified criteria."
    },
    {
      "question_id": 19,
      "question": "What is the difference between `reverse()` and `reverse_lazy()` in Django?",
      "answer": "`reverse()` resolves URLs immediately and is typically used in views or functions. `reverse_lazy()` is a lazy version that delays URL resolution until it's needed, which is useful in settings or class-based views where the URL might not yet be loaded at the time of import."
    },
    {
      "question_id": 20,
      "question": "How can you handle file uploads in Django?",
      "answer": "Django handles file uploads using `FileField` or `ImageField` in models. The uploaded files are stored in the directory specified by `MEDIA_ROOT`. Forms should use `enctype='multipart/form-data'`, and the file can be accessed via `request.FILES`. Files are saved automatically when using a `ModelForm`."
    }
  ]
  